Требуется реализовать пару контроллеров, небольшую бд

Регистрация пользователя:
1) POST /api/users/register

{
  "email": "user@mail.ru",
  "password": "password",
  "firstName": "Иван",
  "lastName": "Иванов",
  "dateOfBirth": "1990-05-15",
  "phone": "+7(989)815-03-36",
  "info": "Предложение услуг и товаров"
}

Создание заказа:
2) POST /api/orders/new

{
  "userId": 1,
  "items": [
    { "productId": 1, "count": 2 }
  ],
  "shippingAddress": {
    "house": "10a",
    "street": "Колотушкина",
    "city": "Владивосток",
    "postalCode": "666666"
  },
  "paymentMethod": "credit_card"
}

Добавьте в бд таблицу с какими-нибудь товарами, для проверки работы. По итогу в бд должны быть пользователи,
 товары и заказы (между товарами и заказами кросс), только дочитайте задание до конца, чтобы понимать, что еще добавить в таблицы.

Далее:
1. С помощью нового медиатора организовать валидацию команд:
	1.1 - при регистрации проверяется наличие всех полей, телефон проверяется на то, что это телефон, 
email проверяется на корректный email. Дата рождения должна принадлежать совершеннолетнему, у нас товары для взрослых
	1.2 - при заказе проверять наличие и существование указанных товаров и существование пользователя
2. Добавить новое поведение ClientInfoBehavior, которое будет добавлять к команде информацию в доп свойства: 
время создания команды, ip-адрес и user-agent клиента. Для этих данных нужно предусмотреть в командах соответствующие свойства.
Получение адреса клиента (вообще это не точно, если сервис за прокси, потребуются доп. настройки)
var remoteIpAddress = HttpContext.Connection.RemoteIpAddress;
string clientIp = remoteIpAddress.ToString();
Получение user-agent:
var UserAgent = Request.Headers["User-Agent"].ToString();
3. Обработка команд конечно через CQRS.

Интерфейс не надо, тестировать через Postman!
Дедлайн 31.10.25

Пример валидации и поведения в принципе есть в самом репозитории медиатора